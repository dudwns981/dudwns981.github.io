{"version":3,"sources":["data.js","Price__list.js","Detail.js","App.js","index.js"],"names":["id","img","title","content","price","Price__list","props","className","shoes","to","src","width","박스","styled","div","제목","h4","색상","Detail","useState","view","viewChange","inputData","inputData변경","console","log","재고","useEffect","timer","setTimeout","clearTimeout","useParams","history","useHistory","아이디","find","v","parseInt","onChange","e","target","value","Inventory","onClick","newStock","재고변경","재고감소","goBack","App","Data","shoes변경","load","loadSet","Navbar","bg","variant","Container","Brand","href","Nav","Link","as","exact","path","Button","map","a","i","Loading","axios","get","then","result","data","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdb67c1b.chunk.js","sourcesContent":["// 컴포넌트로 만들어 첨부하기\r\n//  컴포넌트에 데이터바인딩 완료하기\r\n// 컴포넌트를 반복문으로 돌리기\r\n\r\n\r\n\r\nexport default [\r\n\r\n  {\r\n    id : 0,\r\n    img : \"https://codingapple1.github.io/shop/shoes1.jpg\",\r\n    title : \"White and Black\",\r\n    content : \"Born in France\",\r\n    price : 120000\r\n  },\r\n\r\n  {\r\n    id : 1,\r\n    img : \"https://codingapple1.github.io/shop/shoes2.jpg\",\r\n    title : \"Red Knit\",\r\n    content : \"Born in Seoul\",\r\n    price : 110000\r\n  },\r\n\r\n  {\r\n    id : 2,\r\n    img : \"https://codingapple1.github.io/shop/shoes3.jpg\",\r\n    title : \"Grey Yordan\",\r\n    content : \"Born in the States\",\r\n    price : 130000 \r\n  }\r\n]\r\n\r\n// 보낼 변수가 많을 때는\r\n//  내보내기 : export {변수1, 변수2}\r\n// 가져오기: import {변수1, 변수2} from 경로\r\n// 이런경우에는 받아올때 작명이 안됨 그대로 받아와야함","import {Link, Route, Switch} from 'react-router-dom';\r\n\r\nfunction Price__list(props) {\r\n    return (\r\n        <div className=\"col-md-4\" id={props.shoes.id}>\r\n         <Link to={`/detail/${props.shoes.id}`}><img  src={`https://codingapple1.github.io/shop/shoes${props.shoes.id + 1}.jpg`} width=\"100%\"></img></Link>\r\n            <h4>{props.shoes.title}</h4>\r\n            <p>{props.shoes.content}</p>\r\n\t\t\t\t\t\t<p>{props.shoes.price}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Price__list;\r\n\r\n// https://codingapple1.github.io/shop/shoes2.jpg","import React, {useEffect, useState} from 'react'\r\nimport {useHistory, useParams} from 'react-router-dom'\r\nimport styled from 'styled-components' \r\nimport './Detail.scss'\r\nlet 박스 = styled.div`\r\n  padding : 30px;\r\n  font\r\n`;\r\n\r\nlet 제목 = styled.h4`\r\n  font-size : 25px;\r\n  color : ${props => props.색상}\r\n`\r\n\r\n\r\nfunction Detail(props) {\r\n\r\n  let [view,viewChange] = useState(true)\r\n  let [inputData, inputData변경] = useState('')\r\n\r\n  const fade = (a)=>{\r\n    viewChange(a)\r\n  }\r\n  \r\n  function 재고감소(){\r\n    let newStock = [... props.재고];\r\n    newStock[아이디.id] --;\r\n    props.재고변경(newStock);\r\n  }\r\n\r\n\r\n  \r\n  console.log(\"재고출력\" + props.재고)\r\n  // detail이 업데이트 되거나 렌더링이 될때 실행\r\n  useEffect(()=>{\r\n  let timer = setTimeout(() => {\r\n      fade(false) },1000);\r\n    console.log(\"출력시작\")\r\n\r\n    // 컴포넌트가 사라질때 특정코드를 실행\r\n    return () =>{clearTimeout(timer); console.log(\"페이지변경\")}\r\n\r\n    // view가 변경될때만 state가 변경됨 [여러개 넣기 가능]\r\n    // [] 빈칸이라면 페이지가 최초 렌더링 될때만 사용됨\r\n  },[]);\r\n\r\n  // useEffect(()=>{\r\n  //   setTimeout(() => {\r\n  //     fade(true)\r\n  //   }, 5000);\r\n    \r\n  // })\r\n\r\n\r\n\r\n  let {id} = useParams();\r\n  let history = useHistory();\r\n\r\n  const list = props.shoes;\r\n  const 아이디= list.find(v=>v.id ===parseInt({id}.id));\r\n\r\n// 재고사본만들기\r\n\r\n\r\n\r\n\treturn (\r\n    \r\n\t\t<div>\r\n\t\t\t<div className=\"container\">\r\n        <박스>\r\n        <제목 className=\"red\">상세페이지</제목>\r\n        </박스>\r\n    {inputData}\r\n    <input onChange={(e)=>{inputData변경(e.target.value)}}/>\r\n\r\n\r\n\r\n\r\n      {view === true \r\n      ? <div className=\"my-alert2\">\r\n        <p>재고가 얼마 남지 않았습니다.</p>\r\n        </div>\r\n      : null }\r\n      \r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n\r\n\r\n        {/* {console.log(props.shoes[0].id === parseInt({id}.id))} */}\r\n        {/* {console.log(props.shoes[0].id)}; */}\r\n        {/* {console.log({id})} */}\r\n        {/* {console.log({id1})} */}\r\n\r\n\r\n          <img src={`https://codingapple1.github.io/shop/shoes${아이디.id +1}.jpg`}\r\n          \r\n          width=\"100%\" />\r\n        </div>\r\n        <div className=\"col-md-6 mt-4\">\r\n          <h4 className=\"pt-5\">{props.shoes[아이디.id].title}</h4>\r\n          <p>{props.shoes[아이디.id].content}</p>\r\n          <p>{props.shoes[아이디.id].price}</p>\r\n          <Inventory 재고={props.재고} id={아이디.id}/>\r\n          \r\n        \r\n\r\n          <button className=\"btn btn-danger\" onClick={()=>{\r\n           재고감소()\r\n}\r\n          }>주문하기</button> \r\n          <button className=\"btn btn-danger\" onClick={()=>{\r\n            history.goBack(); //경로로 이동 history.push('/경로')\r\n          }}>뒤로가기</button> \r\n        </div>\r\n      </div>\r\n</div> \r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Detail\r\n\r\nfunction Inventory (props) {\r\n  // console.log(props.재고)\r\n  return (\r\n    <div className=\"inventory\">\r\n      재고:{props.재고[props.id]}\r\n\r\n    </div>\r\n    \r\n  )\r\n}","// eslint-disable\r\nimport './App.css';\r\nimport { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Nav, Navbar, Container,Button} from 'react-bootstrap';\r\nimport Data from './data.js';\r\nimport Price__list from './Price__list';\r\nimport {Link, Route, Switch} from 'react-router-dom';\r\nimport Detail from './Detail';\r\nimport axios from 'axios';\r\n\r\n\r\n// 중요한 데이터는 상위 데이터에 보관하는 것이 중요; (관습) \r\nfunction App() {\r\n  let [shoes, shoes변경] = useState(Data);\r\n  let [load , loadSet] = useState(false);\r\n  let [재고,재고변경] = useState([10,11,12,13,14,15]);\r\n\r\n  \r\n  \r\n\r\n  // const beta = [{12},{43}];\r\n\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n  <Navbar bg=\"secondary\" variant=\"dark\">\r\n    <Container>\r\n    <Navbar.Brand href=\"#home\">ShoeShop</Navbar.Brand>\r\n    <Nav className=\"me-auto\">\r\n      <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n      <Nav.Link as={Link} to=\"/detail\">Detail</Nav.Link>\r\n      <Nav.Link >Pricing</Nav.Link>\r\n    </Nav>\r\n    </Container>\r\n  </Navbar>\r\n\r\n  \r\n  {/* switch는 컴포넌트가 중복매칭 되는것을 피하기 위해서, switch 내에서는 중복매칭이 발생하지 않는다 */}\r\n\r\n  <Switch>\r\n  \r\n  <Route exact path=\"/\">\r\n  <div className=\"background\">\r\n  <h1>20% Season Off </h1>\r\n  <p>\r\n    This is a simple hero unit, a simple jumbotron-style component for calling\r\n    extra attention to featured content or information.\r\n  </p>\r\n  <p>\r\n    <Button variant=\"primary\">Learn more</Button>\r\n  </p>\r\n  </div>\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            {shoes.map((a,i)=>{ return(\r\n            <Price__list shoes={a} i={i} key={i}/>\r\n            ); })}\r\n            \r\n\r\n        </div>\r\n          {load === true ? <Loading/> : null}\r\n      \r\n\r\n\r\n\r\n        <button className=\"btn btn-primary\" onClick={()=>{\r\n\r\n          // 로딩중이라는 UI 띄우기\r\n          loadSet(true);\r\n          setTimeout(() => {\r\n            axios.get('https://codingapple1.github.io/shop/data2.json')\r\n          .then((result)=>{\r\n            // 로딩중 Ui 삭제\r\n            loadSet(false);\r\n            shoes변경([...shoes, ...result.data])\r\n          })\r\n          .catch(()=>{\r\n            loadSet(false);\r\n            // 로딩중 Ui 삭제\r\n            console.log(\"실패했어요\")\r\n          })\r\n            \r\n          }, 3000);\r\n\r\n          \r\n\r\n        }}>더보기</button>\r\n      \r\n        {/* {beta.map((a)=>{\r\n          return (\r\n            <div>abc</div>\r\n          )\r\n        })} */}\r\n    </div>\r\n\r\n    \r\n  </Route>\r\n  \r\n    <Route path=\"/detail/:id\">\r\n      <Detail shoes={shoes} 재고={재고} 재고변경={재고변경} / > \r\n  </Route>\r\n\r\n{/* :id는 아무단어나 쳤을때 보여주는 곳 */}\r\n\r\n  <Route exact path=\"/\">\r\n  <div>아무거나 적었을때</div>\r\n  </Route>\r\n    </Switch>\r\n\r\n  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\nfunction Loading (){\r\n  return(\r\n    <>\r\n    <div>로딩중입니다!</div>\r\n    <h3>안녕하세요!</h3>\r\n    </>\r\n  )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// 라이브러리에서 경로없이 바로 들고오는 것\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// 해쉬라우터는 주소창에다가 #을 넣는 건데 더 안전하게 라우팅할 수 있음"],"sourceRoot":""}